#pragma once

// command code
typedef enum {
	CMD_SYSTEM,
	CMD_PROFILE,
	CMD_MEMORY,
	CMD_VIDEO,
	CMD_IF,
	CMD_SIZE
} TESTDRIVE_CMD;

extern const TCHAR* g_sCmd[CMD_SIZE];

// system.*
typedef enum {
	CMD_SYSTEM_TITLE,
	CMD_SYSTEM_SUBTITLE,
	CMD_SYSTEM_SPLASH,
	CMD_SYSTEM_CLEAR,
	CMD_SYSTEM_CALL,
	CMD_SYSTEM_SHELL,
	CMD_SYSTEM_LUA,
	CMD_SYSTEM_DOCUMENT,
	CMD_SYSTEM_MSG,
	CMD_SYSTEM_ERROR,
	CMD_SYSTEM_SIZE
} TESTDRIVE_CMD_SYSTEM;

extern const TCHAR* g_sCmdSystem[CMD_SYSTEM_SIZE];

// system.view.*
typedef enum {
	CMD_SYSTEM_DOCUMENT_ADD,
	CMD_SYSTEM_DOCUMENT_CLOSE,
	CMD_SYSTEM_DOCUMENT_CALL,
	CMD_SYSTEM_VIEW_SIZE
} TESTDRIVE_CMD_SYSTEM_DOCUMENT;

extern const TCHAR* g_sCmdSystemDocument[CMD_SYSTEM_VIEW_SIZE];

// video.*
typedef enum {
	CMD_VIDEO_CREATE,
	CMD_VIDEO_ADDRESS,
	CMD_VIDEO_STRIDE,
	CMD_VIDEO_UPDATE,
	CMD_VIDEO_STORE,
	CMD_VIDEO_SIZE
} TESTDRIVE_CMD_VIDEO;

extern const TCHAR* g_sCmdVideo[CMD_VIDEO_SIZE];

// if.*
typedef enum {
	CMD_IF_FILE,
	CMD_IF_DOCUMENT,
	CMD_IF_LOCALE,
	CMD_IF_ELSE,
	CMD_IF_END,
	CMD_IF_SIZE
} TESTDRIVE_CMD_IF;

extern const TCHAR* g_sCmdIf[CMD_IF_SIZE];

// memory.*
typedef enum {
	CMD_MEMORY_CREATE,
	CMD_MEMORY_LOAD,
	CMD_MEMORY_STORE,
	CMD_MEMORY_SIZE
} TESTDRIVE_CMD_MEMORY;

extern const TCHAR* g_sCmdMemory[CMD_MEMORY_SIZE];

// memory.load.*
typedef enum {
	CMD_MEMORY_LOAD_IMAGE,
	CMD_MEMORY_LOAD_SIM,
	CMD_MEMORY_LOAD_BIN,
	CMD_MEMORY_LOAD_DWORD,
	CMD_MEMORY_LOAD_WORD,
	CMD_MEMORY_LOAD_BYTE,
	CMD_MEMORY_LOAD_FLOAT,
	CMD_MEMORY_LOAD_TEXT,
	CMD_MEMORY_LOAD_SIZE
} TESTDRIVE_CMD_MEMORY_LOAD;

extern const TCHAR* g_sCmdMemoryLoadStore[CMD_MEMORY_LOAD_SIZE];

// memory.store.*
typedef enum {
	CMD_MEMORY_STORE_IMAGE,
	CMD_MEMORY_STORE_SIM,
	CMD_MEMORY_STORE_BIN,
	CMD_MEMORY_STORE_SIZE
} TESTDRIVE_CMD_MEMORY_STORE;

// profile.*
typedef enum {
	CMD_PROFILE_TREE,
	CMD_PROFILE_CLEAR,
	CMD_PROFILE_CALL,
	CMD_PROFILE_SET,
	CMD_PROFILE_PATH,
	CMD_PROFILE_SIZE
} TESTDRIVE_CMD_PROFILE;

extern const TCHAR* g_sCmdProfile[CMD_PROFILE_SIZE];

// profile.list.*
typedef enum {
	CMD_PROFILE_LIST_ROOT,
	CMD_PROFILE_LIST_PARENT,
	CMD_PROFILE_LIST_CHILD,
	CMD_PROFILE_LIST_ADD,
	CMD_PROFILE_LIST_SIZE
} TESTDRIVE_CMD_PROFILE_LIST;

extern const TCHAR* g_sCmdProfileList[CMD_PROFILE_LIST_SIZE];

// profile.set.*
typedef enum {
	TESTDRIVE_PROFILE_INITIALIZE,
	TESTDRIVE_PROFILE_CHECK,
	TESTDRIVE_PROFILE_CLEANUP,
	TESTDRIVE_PROFILE_SIZE,
} TESTDRIVE_PROFILE;

// enum define refer to "TestDriveImp.h"
typedef enum{
	TREE_ITEM_SCREEN,
	TREE_ITEM_CHART,
	TREE_ITEM_REPORT,
	TREE_ITEM_NEWORK,
	TREE_ITEM_PROFILE,
	TREE_ITEM_TREE_OPEN,
	TREE_ITEM_SEARCH,
	TREE_ITEM_TREE_EXPAND,
	TREE_ITEM_TREE_CLOSE,
}TD_TREE_ITEM;


extern const TCHAR* g_sCmdProfileSet[TESTDRIVE_PROFILE_SIZE];

#define PROFILE_ITEM_SIZE	 TREE_ITEM_TREE_CLOSE

extern const TCHAR* g_sProfileTree[PROFILE_ITEM_SIZE];